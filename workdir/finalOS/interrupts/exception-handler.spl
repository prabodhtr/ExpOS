// set the mode flag to -1
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9] = -1;

// store UPTR
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// switch to kernel stack
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;

multipush(EIP);

alias functionNum R1;
alias arg1 R2;
alias arg2 R3;
alias userSP R5;
alias pid R6;

userSP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
pid = [SYSTEM_STATUS_TABLE + 1];

// if exception is not due to page fault or if the user stack is full
if((EC != 0) || (userSP == PTLR * 512 - 1)) then
	print "EC value is:";
	print EC;
	print "EIP value is:";
	print EIP;
	print "EPN value is:";
	print EPN;
	print "EMA value is:";
	print EMA;

	//invoke exit process
	multipush(R1, R2, R3, R5, R6);
	functionNum = 3;
	arg1 = pid;
	call MOD_1;
	multipop(R1, R2, R3, R5, R6);

	// switch to another process
	call MOD_5;
endif;

// Exception is due to page fault //

// page fault in code page; EPN = 4/5/6/7
if(EPN > 3 && EPN < 8 ) then
	alias blockToLoad R7;
	blockToLoad = [DISK_MAP_TABLE + pid * 10 + EPN];

	//invoke get code page
	multipush(R1, R2, R3, R5, R6, R7);
	functionNum = 5;
	arg1 = blockToLoad;
	call MOD_2;
	alias loadedPage R8;
	loadedPage = R0;
	multipop(R1, R2, R3, R5, R6, R7);

	// update page table entry
	PTBR = PAGE_TABLE_BASE + pid * 20;
	[PTBR + 2 * EPN] = loadedPage;
	[PTBR + 2 * EPN + 1] = "1100";
endif;

// page fault due to heap page; EPN=2/3
if((EPN == 2) || (EPN == 3)) then
	//get free page
	multipush(R1, R2, R3, R5, R6, R7);
	functionNum = 1;
	call MOD_2;
	alias freePage R9;
	freePage = R0;
	multipop(R1, R2, R3, R5, R6, R7);

	// update page table entry
	PTBR = PAGE_TABLE_BASE + pid * 20;
	[PTBR + 4] = freePage;
	[PTBR + 5] = "1110";

	//get free page
	multipush(R1, R2, R3, R5, R6, R7);
	functionNum = 1;
	call MOD_2;
	freePage = R0;
	multipop(R1, R2, R3, R5, R6, R7);

	// update page table entry
	[PTBR + 6] = freePage;
	[PTBR + 7] = "1110";
endif;

//reset mode flag
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;

multipop(EIP);

restore;

SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

// re-execute the instruction that caused page fault after loading pages
SP = SP + 1;
//kernel mode, so only physical address works
[[PTBR + (2 * (SP / 512))] * 512 + (SP % 512)] = EIP;

ireturn;



