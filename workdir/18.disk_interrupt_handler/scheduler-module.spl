alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

// kernel expects application to push all registers 'except' BP before making kernel calls
multipush (BP);

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + (currentPID * 16);

//save KTPR (User Area Page Num % 512)
[process_table_entry + 12] = SP % 512;
//save PTBR and PTLR of current process
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias pid R3;
alias pstatus R4;
pid = (currentPID + 1) % MAX_PROC_NUM;
while(pid != currentPID) do
	pstatus = [(PROCESS_TABLE + (pid * PT_ENTRY_SIZE)) + 4];
	if(pid == 0) then
		pid = 1;
		continue;
	endif;

	if((pstatus == "READY") || (pstatus == "CREATED")) then
		break;
	else
		pid = (pid + 1) % MAX_PROC_NUM;
	endif;
endwhile;

if(pid == currentPID) then
	pid = 0;
endif;

//Restore the SP, PTBR and PTLR values from the Process Table entry for the new process
alias new_process_table R5;
new_process_table = PROCESS_TABLE + (pid * 16);

//Set back Kernel SP, PTBR , PTLR to that of new process
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

// update PID of running process in system status table
[SYSTEM_STATUS_TABLE + 1] = pid;

if([new_process_table + 4] == "CREATED") then
	// the process has been scheduled for first time. So no user-context(registers) has been backed up
	[new_process_table + 4] = "RUNNING";
	// switch to user stack
	SP = [new_process_table + 13];
	// set mode flag
	[new_process_table + 9] = 0;
	ireturn;
endif;

// update state of newly scheduled process to RUNNING
[new_process_table + 4] = "RUNNING";
multipop (BP);
return;
