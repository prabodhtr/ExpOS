alias output R0;
alias functionNum R1;
alias arg1 R2;
alias arg2 R3;

// free User Area Page
if(functionNum == 2) then
	//get user area page
	alias UAP R4;
	UAP = [PROCESS_TABLE + (arg1 * PT_ENTRY_SIZE) + 11];

	//free page by calling memory manager module
	multipush(R1, R2, R3, R4);
	functionNum = 2;
	arg1 = UAP;
	call MOD_2;
	multipop(R1, R2, R3, R4);

	return;
endif;

// exit function
if(functionNum == 3) then

	// invoke free page table for given pid
	multipush(R1, R2, R3);
	functionNum = 4;
	call MOD_1;
	multipop(R1, R2, R3);

	// invoke free user area page for given pid
	multipush(R1, R2, R3);
	functionNum = 2;
	call MOD_1;
	multipop(R1, R2, R3);

	// update process state
	[PROCESS_TABLE + (arg1 * PT_ENTRY_SIZE) + 4] = "TERMINATED";

	return;
endif;

// free page table
if(functionNum == 4) then

	//invalidate library page. No need to free as its shared
	PTBR = [PROCESS_TABLE + (arg1 * PT_ENTRY_SIZE) + 14];
	PTLR = [PROCESS_TABLE + (arg1 * PT_ENTRY_SIZE) + 15];
	[PTBR+0] = -1;
    [PTBR+1] = "0000";
    [PTBR+2] = -1;
    [PTBR+3] = "0000";

    // invalidate rest of the valid pages
    alias counter R4;
    counter = 2;
    while((2 * counter) < (2 * PTLR)) do
    	if([PTBR + ( 2 * counter)] != -1) then
			//free page by calling memory manager module
			multipush(R1, R2, R3, R4);
			functionNum = 2;
			arg1 = [PTBR + ( 2 * counter)];
			call MOD_2;
			multipop(R1, R2, R3, R4);

			[PTBR + ( 2 * counter)] = -1;
			[PTBR + ( 2 * counter) + 1] = "0000";
    	endif;
    	counter = counter + 1;
    endwhile;

    return;
endif;