alias output R0;
alias functionNum R1;
alias arg1 R2;
alias arg2 R3;
alias arg3 R4;

//disk store
// arg1:pid; arg2:page_num; arg3: block_num
if(functionNum == 1) then

	// 1.Acquire the disk
	multipush(R1, R2, R3, R4);
	// store function number of acquire disk fn of resource manager and pid in R1, and R2
	functionNum = 3;
	// call acquire terminal function of resource manager
	call MOD_0;
	multipop(R1, R2, R3, R4);

	//udpate the LOAD/STORE BIT, set PAGE NUMBER and BLOCK NUMBER in the Disk Status Table.
 	[DISK_STATUS_TABLE + 1] = 1;
 	[DISK_STATUS_TABLE + 2] = arg2;
 	[DISK_STATUS_TABLE + 3] = arg3;

	// store to disk
	store(arg2, arg3);

	//Change the state of the current process to WAIT_DISK
	[PROCESS_TABLE + (arg1 * PT_ENTRY_SIZE) + 4] = "WAIT_DISK";

	multipush(R1, R2, R3, R4);
	//call scheduler to schedule other process
	call MOD_5;
	//continue execution once scheduler schedules this process again after page is loaded and disk interrupt updates the status to READY
	multipop(R1, R2, R3, R4);

	//disk would be released by disk interrupt once its invoked on completing the page load
	return;

endif;


// disk load
// arg1:pid; arg2:page_num; arg3: block_num
if(functionNum == 2) then
	// 1.Acquire the disk
	multipush(R1, R2, R3, R4);
	// store function number of acquire disk fn of resource manager and pid in R1, and R2
	functionNum = 3;
	// call acquire terminal function of resource manager
	call MOD_0;
	multipop(R1, R2, R3, R4);

	//Reset the LOAD/STORE BIT, set PAGE NUMBER and BLOCK NUMBER in the Disk Status Table.
 	[DISK_STATUS_TABLE + 1] = 0;
 	[DISK_STATUS_TABLE + 2] = arg2;
 	[DISK_STATUS_TABLE + 3] = arg3;

	//2.invoke load statement(non-blocking)
 	load(arg2, arg3);

 	//3.Change the state of the current process to WAIT_DISK
	[PROCESS_TABLE + (arg1 * PT_ENTRY_SIZE) + 4] = "WAIT_DISK";

	multipush(R1, R2, R3, R4);
	//call scheduler to schedule other process
	call MOD_5;
	//continue execution once scheduler schedules this process again after page is loaded and disk interrupt updates the status to READY
	multipop(R1, R2, R3, R4);

	//disk would be released by disk interrupt once its invoked on completing the page load
	return;
endif;

// terminal write
// arg1:pid; arg2:word to print
if(functionNum == 3) then

	// 1.Acquire the terminal
	multipush(R1, R2, R3);
	// store function number of acquire terminal fn of resource manager and pid in R1, and R2
	functionNum = 8;
	// call acquire terminal function of resource manager
	call MOD_0;
	multipop(R1, R2, R3);

	// 2.Print
	print arg2;

	// 3.Release the terminal
	multipush(R1, R2, R3);
	// store function number of release terminal fn of resource manager and pid in R1, and R2
	functionNum = 9;
	call MOD_0;
	alias returnVal R5;
	returnVal = output;
	multipop(R1, R2, R3);

	return;
endif;

// terminal read
// arg1:pid; arg2:address to read to
if(functionNum == 4) then
	// 1.Acquire the terminal
	multipush(R1, R2, R3);
	// store function number of acquire terminal fn of resource manager and pid in R1, and R2
	functionNum = 8;
	// call acquire terminal function of resource manager
	call MOD_0;
	multipop(R1, R2, R3);

	//2.read from terminal
	read;

	//3.Change the state of the current process to WAIT_TERMINAL
	[PROCESS_TABLE + (arg1 * PT_ENTRY_SIZE) + 4] = "WAIT_TERMINAL";

	multipush(R1, R2, R3);
	//call scheduler to schedule other process
	call MOD_5;
	//continue execution once scheduler schedules this process again after input is received from console and console interrupt updates the status to READY
	multipop(R1, R2, R3);

	// The logical address of the word where the data has to be stored is in R3. Convert this logical address to physical address.
	alias wordPhysical R5;
	wordPhysical = [PTBR + (2 * (arg2 / 512))] * 512 + (arg2 % 512);
	//Store the value present in input buffer field of process table to the obtained physical address of the word.
	[wordPhysical] = [PROCESS_TABLE + (arg1 * PT_ENTRY_SIZE) + 8];

	//terminal would be released by console interrupt once its invoked on receiving the input
	return;
endif;

return;

