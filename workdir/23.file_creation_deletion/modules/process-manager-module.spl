alias output R0;
alias functionNum R1;
alias arg1 R2;
alias arg2 R3;

// get pcb entry
if(functionNum == 1) then
	alias counter R5;
	counter = 1;
	while(counter < MAX_PROC_NUM) do
		if([PROCESS_TABLE + (counter * 16) + 4] == "TERMINATED") then
			// set return value as free pcb index
			R0 = counter;
			// initialize pid, state, PTBR and PTLR
			[PROCESS_TABLE + (counter * 16) + 1] = counter;
			[PROCESS_TABLE + (counter * 16) + 4] = "ALLOCATED";
			[PROCESS_TABLE + (counter * 16) + 14] = PAGE_TABLE_BASE + counter * 20;
			[PROCESS_TABLE + (counter * 16) + 15] = 10;

			return;
		endif;
		counter = counter + 1;
	endwhile;

	// if no process available return -1
	R0 = -1;
	return;
endif;


// free User Area Page
if(functionNum == 2) then

	//get user area page
	alias UAP R4;
	UAP = [PROCESS_TABLE + (arg1 * PT_ENTRY_SIZE) + 11];

	// user area page has per process resource table. Make sure all semaphores and open files are released for the process
	alias counter R6;
	alias per_proc_rt R7;
	per_proc_rt = ((UAP + 1) * 512 - 1) - 15;
	while(counter < 16) do
		if([per_proc_rt + counter] == "SEMAPHORE") then
			//invoke release semaphore fn in resource manager with sem table index
			// push args as we might need value of arg1 again
			multipush(R1, R2, R3, R4, R5, R6, R7);
			functionNum = 7;
			arg2 = arg1;
			arg1 = [per_proc_rt + counter + 1];
			call MOD_0;
			multipop(R1, R2, R3, R4, R5, R6, R7);
		endif;
		counter = counter + 2;
	endwhile;

	//free page by calling memory manager module
	multipush(R1, R2, R3, R4);
	functionNum = 2;
	arg1 = UAP;
	call MOD_2;
	multipop(R1, R2, R3, R4);

	return;
endif;

// exit function
if(functionNum == 3) then

	alias currentPID R5;
	currentPID = [SYSTEM_STATUS_TABLE + 1];

    // if exit is not called from exec interrupt, unlock all processes waiting for this process and orphan child processes
    if([PROCESS_TABLE + (currentPID * 16) + 9] != 9) then
    	alias counter R6;
    	counter = 0;
    	while(counter < MAX_PROC_NUM) do
    		if(([PROCESS_TABLE + ( counter * 16) + 4] == "WAIT_PROCESS") && ([PROCESS_TABLE + ( counter * 16) + 5] == currentPID)) then
    			[PROCESS_TABLE + ( counter * 16) + 4] = "READY";
    		endif;

    		// if current process is parent of some process, make it orphan
    		if([PROCESS_TABLE + ( counter * 16) + 2] == currentPID) then
    			[PROCESS_TABLE + ( counter * 16) + 2] = -1;
    		endif;

    		//TODO: release semaphores acquired by the process and make waiting processes ready?

    		counter = counter + 1;
    	endwhile;
    endif;

	// invoke free page table for given pid
	multipush(R1, R2, R3);
	functionNum = 4;
	call MOD_1;
	multipop(R1, R2, R3);

	// invoke free user area page for given pid
	multipush(R1, R2, R3);
	functionNum = 2;
	call MOD_1;
	multipop(R1, R2, R3);

	// update process state
	[PROCESS_TABLE + (arg1 * PT_ENTRY_SIZE) + 4] = "TERMINATED";

	return;
endif;

// free page table
//arg1:pid;
if(functionNum == 4) then

	//invalidate library page. No need to free as its shared
	PTBR = [PROCESS_TABLE + (arg1 * PT_ENTRY_SIZE) + 14];
	PTLR = [PROCESS_TABLE + (arg1 * PT_ENTRY_SIZE) + 15];
	[PTBR+0] = -1;
	[PTBR+1] = "0000";
	[PTBR+2] = -1;
	[PTBR+3] = "0000";

	// invalidate rest of the valid pages
	alias counter R4;
	counter = 2;
	while(counter < PTLR) do
		if([PTBR + ( 2 * counter)] != -1) then
		//free page by calling memory manager module
		multipush(R1, R2, R3, R4);
		functionNum = 2;
		arg1 = [PTBR + ( 2 * counter)];
		call MOD_2;
		multipop(R1, R2, R3, R4);

		[PTBR + ( 2 * counter)] = -1;
		[PTBR + ( 2 * counter) + 1] = "0000";
		endif;
		counter = counter + 1;
	endwhile;

	// invalidate and clear any disk block allocated to this pid's stack and heap.
	// Disk block for code should not be deleted as it was loaded externally and could be reused
	alias diskMapEntry R5;
	alias i R6;
	alias temp R7;
	counter = 0;
	diskMapEntry = DISK_MAP_TABLE + arg1 * 10;

	while( counter < 10) do
		if([diskMapEntry + counter] != -1) then

			// if heap
			if(counter < 4) then
				//heap block should not be shared with any other process inorder to release block
				i = (arg1 + 1) % MAX_PROC_NUM;
				while(i != arg1) do
					temp = DISK_MAP_TABLE + i * 10;
					if(([temp + 2] == [diskMapEntry + counter]) || ([temp + 3] == [diskMapEntry + counter])) then
						// heap is shared with some other process
						break;
					endif;
					i = (i + 1) % MAX_PROC_NUM;
				endwhile;

				if(i == arg1) then
					// block not shared with any other processes. Free to release
					multipush(R1, R2, R3, R4, R5, R6, R7);
					functionNum = 4;
					arg2 = arg1;
					arg1 = [diskMapEntry + counter];
					call MOD_2;
					multipop(R1, R2, R3, R4, R5, R6, R7);
				endif;
			endif;

			// if stack, no chance of block getting shared. Release it
			if(counter > 7) then
				multipush(R1, R2, R3, R4, R5, R6, R7);
				functionNum = 4;
				arg2 = arg1;
				arg1 = [diskMapEntry + counter];
				call MOD_2;
				multipop(R1, R2, R3, R4, R5, R6, R7);
			endif;
		endif;

		[diskMapEntry + counter] = -1;
		counter = counter + 1;
	endwhile;

	return;
endif;