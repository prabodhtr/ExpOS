alias userSP R5;
userSP = SP;
alias currentPID R6;
currentPID = [SYSTEM_STATUS_TABLE + 1];
alias counter R7;
alias per_proc_rt R8;

// switch to kernel stack
[PROCESS_TABLE + ( currentPID * 16) + 13] = SP;
SP = [PROCESS_TABLE + (currentPID * 16) + 11] * 512 - 1;

PTBR = [PROCESS_TABLE + (currentPID * 16) + 14];

//get system call number at userSP - 5
alias sysCallNum R9;
sysCallNum = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + ((userSP - 5) % 512)];

// semget sys call
if(sysCallNum == 17) then
	[PROCESS_TABLE + ( currentPID * 16) + 9] = 17;

    per_proc_rt = ([PROCESS_TABLE + (currentPID * 16) + 11] + 1) * 512 - 1 - 15;
	//find free entry in per process resource table
    counter = 0;
    while(counter < 16) do
    	if([per_proc_rt + counter] == -1) then
    		break;
    	endif;
    	counter = counter + 2;
    endwhile;

    if(counter == 16) then
    	// no free entry found; return -1
    	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
		[PROCESS_TABLE + ( currentPID * 16) + 9] = 0;
		SP = userSP;
		ireturn;
    endif;

    [per_proc_rt + counter] = "SEMAPHORE";

    //acquire semaphore by calling resource manager module
    alias functionNum R1;
    alias arg1 R2;
    functionNum = 6;
    arg1 = currentPID;
	multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9);
	call MOD_0;
	multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9);

	if(R0 == -1) then
		// no semaphores available. Return -2
		[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -2;
		[PROCESS_TABLE + ( currentPID * 16) + 9] = 0;
		SP = userSP;
		ireturn;
	endif;

	// attach the semaphore ID to process
    [per_proc_rt + counter + 1] = R0;

	// return per process rt index; sem descriptor
	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = (counter / 2);

endif;

// semrelease sys call
if(sysCallNum == 18) then
	[PROCESS_TABLE + ( currentPID * 16) + 9] = 18;
    per_proc_rt = ([PROCESS_TABLE + (currentPID * 16) + 11] + 1) * 512 - 1 - 15;

	// validate descriptor passed
	alias semid R10;
    semid = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)];

    if((semid < 0) || (semid > 7)) then
    	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
		[PROCESS_TABLE + ( currentPID * 16) + 9] = 0;
		SP = userSP;
		ireturn;
    endif;

    if([per_proc_rt + semid * 2] != "SEMAPHORE") then
    	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
		[PROCESS_TABLE + ( currentPID * 16) + 9] = 0;
		SP = userSP;
		ireturn;
    endif;

	//call release semaphore fn of resource manager module
    alias functionNum R1;
    alias arg1 R2;
    alias arg2 R3;
    functionNum = 7;
    // arg1: Semaphore Table Index
    arg1 = [per_proc_rt + semid * 2 + 1];
    arg2 = currentPID;
	multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10);
	call MOD_0;
	multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10);

	//invalidate resource table entry
	[per_proc_rt + semid * 2] = -1;
	[per_proc_rt + semid * 2 + 1] = -1;

	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = 0;
endif;

// reset mode flag
[PROCESS_TABLE + ( currentPID * 16) + 9] = 0;
//switch to user stack and return
SP = userSP;
ireturn;
