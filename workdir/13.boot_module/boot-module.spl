// load timer interrupt handler from disk
loadi(4, 17);
loadi(5, 18);

// load library files from disk to memory
loadi(63,13);
loadi(64,14);

// load init program from disk to specific memory
loadi(65,7);
loadi(66,8);

// Load the INT10 module from the disk to the memory.
loadi(22,35);
loadi(23,36);

// Load the exception handler routine from the disk to the memory.
loadi(2, 15);
loadi(3, 16);

// Load console interrupt handler to memory
loadi(16,29);
loadi(17,30);

// set page table entries for init process
PTBR = PAGE_TABLE_BASE + 20; //as PID of idle process is 1 and page table size of each process in 20

//Library -> page 0 and 1
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap -> page 2 and 3
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code  -> page 4, 5, 6 and 7
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack  -> page 8 and 9
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// assign PID as 1 for the init process table entry. Each process is given 16 entries
[(PROCESS_TABLE + 16) + 1] = 1;
// set state of init process to CREATED as its the first process started by OS during bootstrap
[(PROCESS_TABLE + 16) + 4] = "CREATED";
// set the user area page for init code. 11th word stores the physical user area page num
[(PROCESS_TABLE + 16) + 11] = 80;
// set the KPTR to 0. Kernel stack is always cleared after returning to user mode. So offset is always 0 at the start
[(PROCESS_TABLE + 16) + 12] = 0;
// set the UPTR to logical address of idle process stack page. Shouldn't it be done by kernel process?
[(PROCESS_TABLE + 16) + 13] = 8*512;
// set PTBR field
[(PROCESS_TABLE + 16) + 14] = PAGE_TABLE_BASE + 20;
// set PTLR field
[(PROCESS_TABLE + 16) + 15] = 10;

// push location of first instruction to process stack location(following xexe format). Use physical address as os code is run in privileged mode
[76 * 512] = [65 * 512 + 1];

return;