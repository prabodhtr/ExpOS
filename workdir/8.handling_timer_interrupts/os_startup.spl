// load timer interrupt handler from disk
loadi(4, 17);
loadi(5, 18);

// load library files from disk to memory
loadi(63,13);
loadi(64,14);

// load init program from disk to specific memory
loadi(65,7);
loadi(66,8);

// Load the INT10 module from the disk to the memory.
loadi(22,35);
loadi(23,36);

// Load the exception handler routine from the disk to the memory.
loadi(2, 15);
loadi(3, 16);

// PAGE_TABLE_BASE holds the value 29696. Default start of PTBR
// Assume 4th and 5th pages for init code and 8th page for init stack
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

//Library -> page 0 and 1
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap -> page 2 and 3
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code  -> page 4, 5, 6 and 7
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack  -> page 8 and 9
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// set stack to right logical page
SP = 8*512;

// push location of first instruction to stack location. Use physical address as os code is run in privileged mode
// code start location is given as 2nd word code as per xexe format
[76*512] = [65 * 512 + 1];

// ireturn will change to user mode, push value at top of stack(after translation) to IP and decrement stack(popping)
ireturn;