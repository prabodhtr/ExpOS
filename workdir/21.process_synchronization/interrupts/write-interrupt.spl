// set the mode flag of process table to that of write system call
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 5;

alias userSP R5;
userSP = SP;

//get PID of currently running process. Each process table is 16 in size. Hence multiplying with PID will give starting of each process table
//store user SP value to UPTR field, 13th word in each process table
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// Setting SP to User Area Page number * 512 - 1 (User Area Page Number is 11th word in each process table)
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

// get 'physical address' of argument 1 (userSP-4) to get the file descriptor set by user program
// physical address = ([PTBR + 2 * logical_page_num] * 512) + offset
// logical_page_num = logicalAddress / 512
// offset = logicalAddress % 512

alias fileDescriptor R6;
fileDescriptor=[([PTBR + 2 * ((userSP - 4)/ 512)] * 512) + ((userSP - 4) % 512)];

if (fileDescriptor != -2) then
	// if fileDescriptor is invalid, return -1
	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
else
	 alias word R6;
     word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
     alias functionNum R1;
     alias pid R2;
     alias str R3;
     functionNum = 3;
     pid = [SYSTEM_STATUS_TABLE + 1];
     str = word;
     multipush(R0, R1, R2, R3, R4, R5, R6);
     call MOD_4;
     multipop(R0, R1, R2, R3, R4, R5, R6);
     // return 0 on success
     [[PTBR + 2 * (userSP - 1)/ 512] * 512 + ((userSP - 1) % 512)] = 0;
endif;

// no need to backup registers as console interrupt is invoked by program and kernel expects program to have it backed up

// set SP back to user stack pointer value
SP = userSP;

// set mode flag back to 0
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;